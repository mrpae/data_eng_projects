
services:
  duckdb:
    container_name: duckdb
    build:
      context: .
    volumes:
      - ./mnt/tmp/07_security_and_privacy/duckdb_data:/app/data
      - ./scripts:/app/scripts
    stdin_open: true
    tty: true
    environment:
      PYICEBERG_HOME: /app/data
    env_file:
      - .env   
    networks:
      iceberg_network:
  minio:
    image: minio/minio:RELEASE.2024-10-13T13-34-11Z
    container_name: minio
    ports:
      - "9000:9000"   # MinIO API port
      - "9001:9001"   # MinIO Console port
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}   
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_DOMAIN: ${MINIO_DOMAIN}
    command: server /data --console-address ":9001"
    volumes:
      - ./mnt/tmp/07_security_and_privacy/minio_data:/data
    networks:
      iceberg_network:
        aliases:
          - warehouse.minio
  iceberg_rest:
    image: tabulario/iceberg-rest:1.6.0
    container_name: iceberg_rest
    ports:
      - "8181:8181" 
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: us-east-1
      CATALOG_WAREHOUSE: s3://users/
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      CATALOG_S3_ENDPOINT: http://minio:9000 
    depends_on:
      - minio
    networks:
      iceberg_network:
  mc:
    depends_on:
      - minio
    image: minio/mc:RELEASE.2024-10-02T08-27-28Z
    container_name: mc
    networks:
      iceberg_network:
    entrypoint: >
        /bin/sh -c "
        until (/usr/bin/mc config host add minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}) do echo '...waiting...' && sleep 1; done;
        /usr/bin/mc rm -r --force minio/users;
        /usr/bin/mc mb minio/users;
        /usr/bin/mc policy set public minio/users;
        "

networks:
  iceberg_network:
    driver: bridge